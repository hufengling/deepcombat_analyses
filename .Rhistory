mod <- lmer(value ~ 1 + manufac + (manufac | name),
data = lme_raw)
ranef(mod)[["name"]]
ranef(mod)[["name"]] %>% View
ranef(mod)[["name"]] -> rf2
mod <- lmer(value ~ 1 + (manufac | name),
data = lme_raw)
ranef(mod)[["name"]] -> rf1
View(rf1 - rf2)
View(rf1)
View(rf2)
ggsave(filename = "figures/plots/manufac_methods.png",
plot = manufac_methods,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/manufac_lambdas.png",
plot = manufac_lambdas,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/sex_methods.png",
plot = sex_methods,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/sex_lambdas.png",
plot = sex_lambdas,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/diag_methods.png",
plot = diag_methods,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/diag_lambdas.png",
plot = diag_lambdas,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/age_methods.png",
plot = age_methods,
width = 2128, height = 1575, units = "px", type = "cairo-png")
ggsave(filename = "figures/plots/age_lambdas.png",
plot = age_lambdas,
width = 2128, height = 1575, units = "px", type = "cairo-png")
flipped_methods_umap <- umap_plotter(coord_flipper(methods_umap_list$coords,
c(0, 1, 3, 0, 2, 0)),
unique_cov,
plot_names = methods_names,
is_umap_coords = TRUE); flipped_methods_umap
set.seed(5)
methods_umap_list <- umap_plotter(unique_data_list[methods_range], unique_cov,
plot_names = methods_names,
n_neighbors = 15, n_epochs = 100); methods_umap_list$plot
flipped_methods_umap <- umap_plotter(coord_flipper(methods_umap_list$coords,
c(0, 1, 3, 0, 2, 0)),
unique_cov,
plot_names = methods_names,
is_umap_coords = TRUE); flipped_methods_umap
ggsave(filename = "figures/plots/methods_umap.png",
plot = flipped_methods_umap,
width = 2128, height = 1575, units = "px", type = "cairo-png")
set.seed(5)
lambdas_umap_list <- umap_plotter(unique_data_list[lambdas_range], unique_cov,
plot_names = lambdas_names,
n_neighbors = 15, n_epochs = 100); lambdas_umap_list$plot
flipped_lambdas_umap <- umap_plotter(coord_flipper(lambdas_umap_list$coords,
c(0, 0, 0, 0, 3, 1)),
unique_cov,
plot_names = lambdas_names,
is_umap_coords = TRUE); flipped_lambdas_umap
ggsave(filename = "figures/plots/lambdas_umap.png",
plot = flipped_lambdas_umap,
width = 2128, height = 1575, units = "px", type = "cairo-png")
methods_umap_list$plot
flipped_methods_umap <- umap_plotter(coord_flipper(methods_umap_list$coords,
c(0, 3, 3, 0, 2, 0)),
unique_cov,
plot_names = methods_names,
is_umap_coords = TRUE); flipped_methods_umap
flipped_methods_umap <- umap_plotter(coord_flipper(methods_umap_list$coords,
c(0, 3, 1, 0, 2, 0)),
unique_cov,
plot_names = methods_names,
is_umap_coords = TRUE); flipped_methods_umap
flipped_methods_umap <- umap_plotter(coord_flipper(methods_umap_list$coords,
c(0, 3, 3, 0, 2, 0)),
unique_cov,
plot_names = methods_names,
is_umap_coords = TRUE); flipped_methods_umap
ggsave(filename = "figures/plots/methods_umap.png",
plot = flipped_methods_umap,
width = 2128, height = 1575, units = "px", type = "cairo-png")
set.seed(5)
lambdas_umap_list$plot
flipped_lambdas_umap <- umap_plotter(coord_flipper(lambdas_umap_list$coords,
c(0, 0, 0, 0, 3, 3)),
unique_cov,
plot_names = lambdas_names,
is_umap_coords = TRUE); flipped_lambdas_umap
ggsave(filename = "figures/plots/lambdas_umap.png",
plot = flipped_lambdas_umap,
width = 2128, height = 1575, units = "px", type = "cairo-png")
methods_pca_list <- pca_plotter(unique_data_list[methods_range], unique_cov,
plot_names = methods_names); methods_pca_list
ggsave(filename = "figures/plots/methods_pca.png",
plot = methods_pca_list,
width = 2128, height = 1575, units = "px", type = "cairo-png")
lambdas_pca_list <- pca_plotter(unique_data_list[lambdas_range], unique_cov,
plot_names = lambdas_names); lambdas_pca_list
ggsave(filename = "figures/plots/lambdas_pca.png",
plot = lambdas_pca_list,
width = 2128, height = 1575, units = "px", type = "cairo-png")
methods_cor_list <- cor_plotter(unique_data_list[methods_range], unique_cov,
plot_names = methods_names); methods_cor_list
ggsave(filename = "figures/plots/methods_cor.png",
plot = methods_cor_list,
width = 2128, height = 1200, units = "px", type = "cairo-png")
lambdas_cor_list <- cor_plotter(unique_data_list[lambdas_range], unique_cov,
plot_names = lambdas_names); lambdas_cor_list
ggsave(filename = "figures/plots/lambdas_cor.png",
plot = lambdas_cor_list,
width = 2128, height = 1200, units = "px", type = "cairo-png")
methods_range
methods_cor_list <- cor_plotter(unique_data_list[methods_range], unique_cov,
plot_names = methods_names); methods_cor_list
View(unique_cov)
library(tidyverse)
all_short = c("002_S_1155", "002_S_1261", "002_S_1268", "002_S_1280")
all_short = c("002_S_1155", "002_S_1261", "002_S_1268", "002_S_1280", "4")
str_detect(all_short, "*_S_*")
str_detect(all_short, "_S_")
View(unique_cov)
source("./code/load_packages.R")
set.seed(20)
raw <- as.matrix(read.csv("./data/raw.csv", header = F))
covariates <- read.csv("./data/covariates.csv", stringsAsFactors = T)
covariates$X.1 <- covariates$X.1 + 1
final_visits_covariates <- covariates %>% group_by(subid) %>% filter(VISIT == max(VISIT))
final_visits_covariates <- final_visits_covariates#[sample(663, 10), ]
final_visits_raw <- raw[final_visits_covariates$X.1, ]
input_list <- make_input_list(final_visits_raw, final_visits_covariates, data_opts = "raw")
adni_ct <- adni_ct_dataset(input_list$input_list, data_type = "all",
insert_new_batch = TRUE,
new_batch = matrix(0.5, nrow = nrow(input_list$input_list$data),
ncol = 1))
adni_all_dl <- dataloader(adni_ct, batch_size = 64, shuffle = TRUE)
input_list <- make_input_list(final_visits_raw, final_visits_covariates, data_opts = "raw")
source("./code/covbat.R")
source("./code/load_packages.R")
set.seed(20)
raw <- as.matrix(read.csv("./data/raw.csv", header = F))
covariates <- read.csv("./data/covariates.csv", stringsAsFactors = T)
covariates$X.1 <- covariates$X.1 + 1
final_visits_covariates <- covariates %>% group_by(subid) %>% filter(VISIT == max(VISIT))
final_visits_covariates <- final_visits_covariates#[sample(663, 10), ]
final_visits_raw <- raw[final_visits_covariates$X.1, ]
#raw <- raw[covariates$Manufacturer != "Philips Medical Systems", ]
#covariates <- covariates[covariates$Manufacturer != "Philips Medical Systems", ]
input_list <- make_input_list(final_visits_raw, final_visits_covariates, data_opts = "raw")
adni_ct <- adni_ct_dataset(input_list$input_list, data_type = "all",
insert_new_batch = TRUE,
new_batch = matrix(0.5, nrow = nrow(input_list$input_list$data),
ncol = 1))
adni_all_dl <- dataloader(adni_ct, batch_size = 64, shuffle = TRUE)
n_latent_dim <- 16
deepcombat_model <- vanilla_vae(feature_dim = 62, latent_dim = n_latent_dim,
n_hidden = 3, n_batch = 1, n_covariate = 4,
inject_decoder = TRUE, inject_last = FALSE, deep_inject = FALSE,
rescale = FALSE, rescale_n_batch = NULL)
resid_optim <- optim_adam(deepcombat_model$parameters, lr = 0.01, weight_decay = 0)
trained_model <- train_nn_annealer(train_epochs = c(5, 30, 5),
anneal_rate = 5,
beta_weights = c(.1, 0, 0),
torch_dl = adni_all_dl,
torch_model = deepcombat_model,
torch_optim = resid_optim,
batch_weights = c(1, 1),
pairwise_type = "none")
deepcombat_model <- trained_model$model
deepcombat_model$eval()
deepcombat_optimal <- deepcombat_model$encode_decode(adni_ct,
attr(input_list$input_list$data,
which = "scaled:center") + input_list$mean,
attr(input_list$input_list$data,
which = "scaled:scale"),
correct = c("combat", "combat"),
mean_only = c(FALSE, FALSE),
use_covariates = c(TRUE, TRUE),
ref_batch = NULL, verbose = TRUE)
source("~/Documents/nnbatch/code/load_packages.R")
# all_raw <- read.csv("./data/raw.csv", header = F)
all_cov <- read.csv("./data/covariates.csv")
all_cov$SEX <- as.factor(all_cov$SEX)
all_cov$DIAGNOSIS <- as.factor(all_cov$DIAGNOSIS)
all_cov$Random <- as.factor(all_cov$Random)
all_cov$manufac <- as.factor(all_cov$manufac)
unique_cov <- all_cov %>%
group_by(subid) %>%
filter(VISIT == max(VISIT)) %>%
as.data.frame()
rm(all_cov)
# unique_raw <- all_raw[unique_cov$X.1, ]
# all_subjects <- read.csv("./data/corrected/0927_refbatch0_lessmeaneffect.csv")[, -1]
# unique_subjects <- read.csv("./data/corrected/1208_ccvae_fit.csv")[, -1]
#
# all_combat_covbat <- make_input_list(all_raw, all_cov, get_combat_covbat = TRUE)
# unique_combat_covbat <- make_input_list(unique_raw, unique_cov, get_combat_covbat = TRUE)
```
unique_data_list <- deepcombat_optimal$combat_restyle
unique_data_list <- list(deepcombat_optimal$combat_restyle)
unique_data_list <- lapply(unique_data_list, as.matrix)
rm(files_list)
method_names <- "Raw"
lambda_names <- "RAw"
methods_range <- 1
adni_cov <- unique_cov %>%
dplyr::select(AGE, SEX, DIAGNOSIS, manufac, MMSCORE) %>%
mutate(SEX = ifelse(SEX == "M", "Male", "Female"),
DIAGNOSIS = case_when(
DIAGNOSIS == "LMCI" ~ "Late Mild Cognitive Impairment",
DIAGNOSIS == "CN" ~ "Cognitively Normal",
DIAGNOSIS == "AD" ~ "Alzheimer Disease"),
manufac = ifelse(manufac == "True", "Siemens", "Philips/GE")) %>%
mutate(DIAGNOSIS = factor(DIAGNOSIS, levels = c("Cognitively Normal", "Late Mild Cognitive Impairment", "Alzheimer Disease")),
SEX = factor(SEX, levels = c("Male", "Female")))
write.csv(adni_cov, "./figures/for_figures/adni_dem.csv",
row.names = F)
theme_gtsummary_journal("nejm")
tbl_summary(adni_cov, by = "manufac",
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
label = list("AGE" ~ "Age",
"SEX" ~ "Sex",
"DIAGNOSIS" ~ "Diagnosis",
"MMSCORE" ~ "Mini-Mental State Examination Score"),
missing = "no",
digits = all_continuous() ~ 1) %>%
modify_caption("Table 1. Patient demographics at time of acquisition, stratified by scanner manufacturer.") %>%
bold_labels()
#gtsave(filename = "figures/demographics.tex")
rm(adni_cov)
manufac_stats <- stats_tester(unique_data_list, unique_cov)
methods_lr <- manufac_stats$lr
methods_lr <- methods_lr[methods_range, c(1, 12:21)] %>%
mutate(across(where(is.numeric), round, digits = 2)) %>%
rename(Method = dataset)
methods_lr[, 2:6] <- methods_lr[, 2:6] * -1
manufac_stats
manufac_stats$lr
manufac_stats$lr %>% View
methods_lr <- manufac_stats$lr
methods_lr <- methods_lr[methods_range, c(1, 12:21)] %>%
mutate(across(where(is.numeric), round, digits = 2)) %>%
rename(Method = dataset)
methods_lr[, 2:6] <- methods_lr[, 2:6] * -1
methods_lr$Method <- methods_names
methods_names
methods_names <- "Raw"
methods_lr$Method <- methods_names
methods_lr <- methods_lr %>%
mutate(AGE_log = paste0(AGE_log, " (", AGE_log_SD, ")"),
SEXM_log = paste0(SEXM_log, " (", SEXM_log_SD, ")"),
DIAGNOSISCN_log = paste0(DIAGNOSISCN_log, " (", DIAGNOSISCN_log_SD, ")"),
DIAGNOSISLMCI_log = paste0(DIAGNOSISLMCI_log, " (", DIAGNOSISLMCI_log_SD, ")"),
manufacTrue_log = paste0(manufacTrue_log, " (", manufacTrue_log_SD, ")"))
methods_lr <- methods_lr[, 1:6]
gt(methods_lr, rowname_col = "Method") %>%
tab_header(title = md("Table 2. Feature-wise linear regression results, reported as negative log 10 p-values — Mean (SD)")) %>%
cols_label(.list = list(AGE_log = md("**Age**"),
SEXM_log = md("**Sex**"),
DIAGNOSISCN_log = md("**AD Status (CN)**"),
DIAGNOSISLMCI_log = md("**AD Status (LMCI)**"),
manufacTrue_log = md("**Batch**")))# %>%
n_latent_dim <- 16
deepcombat_model <- vanilla_vae(feature_dim = 62, latent_dim = n_latent_dim,
n_hidden = 3, n_batch = 1, n_covariate = 4,
inject_decoder = TRUE, inject_last = FALSE, deep_inject = FALSE,
rescale = FALSE, rescale_n_batch = NULL)
resid_optim <- optim_adam(deepcombat_model$parameters, lr = 0.01, weight_decay = 0)
trained_model <- train_nn_annealer(train_epochs = c(5, 30, 5),
anneal_rate = 5,
beta_weights = c(.1, 0, 0),
torch_dl = adni_all_dl,
torch_model = deepcombat_model,
torch_optim = resid_optim,
batch_weights = c(1, 1),
pairwise_type = "none")
deepcombat_model <- trained_model$model
deepcombat_model$eval()
deepcombat_optimal <- deepcombat_model$encode_decode(adni_ct,
attr(input_list$input_list$data,
which = "scaled:center") + input_list$mean,
attr(input_list$input_list$data,
which = "scaled:scale"),
correct = c("combat", "combat"),
mean_only = c(FALSE, FALSE),
use_covariates = c(TRUE, TRUE),
ref_batch = NULL, verbose = TRUE)
raw
dim(raw)
unique_data_list <- list(unique_raw = final_visits_raw, optimal = deepcombat_optimal$combat_restyle)
unique_data_list <- lapply(unique_data_list, as.matrix)
rm(files_list)
methods_names <- ("raw", "dc")
methods_names <- c("raw", "dc")
methods_range <- 2
methods_range <- 1:2
manufac_stats <- stats_tester(unique_data_list, unique_cov)
methods_lr <- manufac_stats$lr
methods_lr <- methods_lr[methods_range, c(1, 12:21)] %>%
mutate(across(where(is.numeric), round, digits = 2)) %>%
rename(Method = dataset)
methods_lr[, 2:6] <- methods_lr[, 2:6] * -1
methods_lr$Method <- methods_names
methods_lr <- methods_lr %>%
mutate(AGE_log = paste0(AGE_log, " (", AGE_log_SD, ")"),
SEXM_log = paste0(SEXM_log, " (", SEXM_log_SD, ")"),
DIAGNOSISCN_log = paste0(DIAGNOSISCN_log, " (", DIAGNOSISCN_log_SD, ")"),
DIAGNOSISLMCI_log = paste0(DIAGNOSISLMCI_log, " (", DIAGNOSISLMCI_log_SD, ")"),
manufacTrue_log = paste0(manufacTrue_log, " (", manufacTrue_log_SD, ")"))
methods_lr <- methods_lr[, 1:6]
gt(methods_lr, rowname_col = "Method") %>%
tab_header(title = md("Table 2. Feature-wise linear regression results, reported as negative log 10 p-values — Mean (SD)")) %>%
cols_label(.list = list(AGE_log = md("**Age**"),
SEXM_log = md("**Sex**"),
DIAGNOSISCN_log = md("**AD Status (CN)**"),
DIAGNOSISLMCI_log = md("**AD Status (LMCI)**"),
manufacTrue_log = md("**Batch**")))# %>%
methods_manova <- manufac_stats$manova %>%
rename(Age = AGE_log, Sex = SEX_log, `AD status` = DIAGNOSIS_log, Batch = manufac_log)
methods_manova <- methods_manova[methods_range, c(1, 6:9)] %>%
mutate(across(where(is.numeric), round, digits = 2)) %>%
rename(Method = dataset)
methods_manova$Method <- methods_names
methods_manova[, -1] <- methods_manova[, -1] * -1
gt(methods_manova, rowname_col = "Method") %>%
tab_header(title = md("Table 2. Multivariate analysis of variance results, reported as negative log 10 p-values.")) %>%
cols_label(.list = list(Age = md("**Age**"),
Sex = md("**Sex**"),
`AD status` = md("**AD Status**"),
Batch = md("**Batch**")))# %>%
methods_ad <- manufac_stats$ad %>%
rename(`Log 10 p-value` = pval_log, SD = pval_log_SD)
methods_ad <- methods_ad[methods_range, c(1, 2:3)] %>%
mutate(across(where(is.numeric), round, digits = 2)) %>%
rename(Method = dataset) %>%
mutate(pval = paste0(pval, " (", pval_SD, ")"))
methods_ad$Method <- methods_names
methods_ad <- methods_ad[, -3]
gt(methods_ad, rowname_col = "Method") %>%
tab_header(title = md("Table 3. Anderson-Darling results across batch.")) %>%
cols_label(.list = list(pval = md("**Mean (SD)**")))# %>%
manufac_results <- ml_cv_tester(unique_data_list, 1:10, unique_cov,
outcome = "manufac",
k_fold = 10, repeats = 5, verbose = T)
manufac_results <- ml_cv_tester(unique_data_list, 1:2, unique_cov,
outcome = "manufac",
k_fold = 10, repeats = 5, verbose = T)
manufac_methods <- ml_results$manufac[methods_range]
manufac_methods <- manufac[methods_range]
manufac_methods <- manufac_results[methods_range]
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
manufac_methods_df <- bind_rows(manufac_methods) %>%
mutate(algorithm = as.factor(rep(ml_names, length(manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(methods_names, each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"dcVAE", "gcVAE", "DeepComBat"))
manufac_methods_df <- bind_rows(manufac_methods) %>%
mutate(algorithm = as.factor(rep(ml_names, length(manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(methods_names, each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "DeepComBat"))
methods_names
manufac_methods_df <- bind_rows(manufac_methods) %>%
mutate(algorithm = as.factor(rep(ml_names, length(manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(methods_names, each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"raw", "dc"))
manufac_methods <- ggplot(manufac_methods_df, aes(x = algorithm_releveled, y = ROC,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_errorbar(aes(ymin = ROC - ROCSD, ymax = ROC + ROCSD),
position = position_dodge(.9)) +
scale_fill_brewer(palette = "Paired", name = "Methods") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()); manufac_methods
manufac_methods
manufac_methods <- manufac_results[methods_range]
manufac_methods
manufac_results
manufac_methods <- manufac_results
manufac_methods_df <- bind_rows(manufac_methods) %>%
mutate(algorithm = as.factor(rep(ml_names, length(manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(methods_names, each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"raw", "dc"))
ml_names
manufac_methods_df <- bind_rows(manufac_methods) %>%
mutate(algorithm = as.factor(rep(ml_names, 2)),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(methods_names, each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"raw", "dc"))
ggplot(manufac_methods_df, aes(x = algorithm_releveled, y = ROC,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_errorbar(aes(ymin = ROC - ROCSD, ymax = ROC + ROCSD),
position = position_dodge(.9)) +
scale_fill_brewer(palette = "Paired", name = "Methods") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
to_benchmark <- function() {
n_latent_dim <- 16
deepcombat_model <- vanilla_vae(feature_dim = 62, latent_dim = n_latent_dim,
n_hidden = 3, n_batch = 1, n_covariate = 4,
inject_decoder = TRUE, inject_last = FALSE, deep_inject = FALSE,
rescale = FALSE, rescale_n_batch = NULL)
resid_optim <- optim_adam(deepcombat_model$parameters, lr = 0.01, weight_decay = 0)
trained_model <- train_nn_annealer(train_epochs = c(5, 30, 5),
anneal_rate = 5,
beta_weights = c(.1, 0, 0),
torch_dl = adni_all_dl,
torch_model = deepcombat_model,
torch_optim = resid_optim,
batch_weights = c(1, 1),
pairwise_type = "none")
deepcombat_model <- trained_model$model
deepcombat_model$eval()
deepcombat_optimal <- deepcombat_model$encode_decode(adni_ct,
attr(input_list$input_list$data,
which = "scaled:center") + input_list$mean,
attr(input_list$input_list$data,
which = "scaled:scale"),
correct = c("combat", "combat"),
mean_only = c(FALSE, FALSE),
use_covariates = c(TRUE, TRUE),
ref_batch = NULL, verbose = TRUE)
}
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmakr
?microbenchmark
microbenchmark(to_benchmark, times = 20L)
system.time
?tik
library(ticktock)
install.packages("ticktokc")
install.packages("ticktock")
system.time()
n_times = 1
system.time(n_times, to_benchmark)
system.time(n_times, to_benchmark())
gcFirst
?system.time()
install.packages("tictoc")
tic()
library(tictoc)
library(tictoc)
tic()
toc()
x = toc
tic()
x = toc()
x
x$tic
?tic()
tic.log()
tic()
toc(log = TRUE)
toc
toc()
tic.log()
tic.log(format = FALSE)
12680.33 - 12671.79
x
x$toc - x$tic
n_times <- 2
run_time <- numeric(n_times)
for (i in 1:n_times) {
tic()
to_benchmark()
toc_obj <- toc()
run_time[i] <- toc_obj$toc - toc_obj$tic
}
run_time
n_times <- 30
run_time <- numeric(n_times)
for (i in 1:n_times) {
tic()
to_benchmark()
toc_obj <- toc()
run_time[i] <- toc_obj$toc - toc_obj$tic
}
run_time
mean(run_time)
sd(run_time)
system()
system("lsmem | grep 'Total online memory'")
system("lscpu | grep 'Model name:'")
