~ Manufacturer,
data[val_inds, ],
covariates[val_inds, ])
message("Harmonizing")
harmonized_val <- deepcombat_harmonize(setup_val, trainer_train, harmonized_train, verbose = TRUE)
return(list(combat_train = t(combat_train$dat.combat),
combat_val = t(combat_val$dat.combat),
covbat_train = t(covbat_train$dat.covbat),
covbat_val = t(covbat_val$dat.covbat),
dc_train = harmonized_train$harmonized,
dc_val = harmonized_val$harmonized))
} else {
return(list(combat_train = t(combat_train$dat.combat),
covbat_train = t(covbat_train$dat.covbat),
dc_train = harmonized_train$harmonized))
}
}
cv_harm_output <- lapply(1:10, function(cv_id) {
cv_harmonization(final_visits_raw, final_visits_covariates, cv_vector, cv_id)
})
combat_val <- matrix(nrow = nrow(final_visits_raw), ncol = ncol(final_visits_raw))
covbat_val <- matrix(nrow = nrow(final_visits_raw), ncol = ncol(final_visits_raw))
dc_val <- matrix(nrow = nrow(final_visits_raw), ncol = ncol(final_visits_raw))
for (i in 1:10) {
combat_val[cv_vector == i, ] <- cv_harm_output[[i]]$combat_val
covbat_val[cv_vector == i, ] <- cv_harm_output[[i]]$covbat_val
dc_val[cv_vector == i, ] <- cv_harm_output[[i]]$dc_val
}
silver_standard <- cv_harmonization(final_visits_raw, final_visits_covariates, cv_vector, NULL)
cv_data_list <- list(raw = final_visits_raw, combat = combat_val,
covbat = covbat_val, dc = dc_val)
stats_test <- stats_tester(cv_data_list[1:4], final_visits_covariates)
stats_test[[1]]
kbet_list <- lapply(cv_data_list, function(df) {
kbet_obj <- kBET(df, batch = final_visits_covariates$Manufacturer)
return(kbet_obj)
})
kbet_df <- lapply(kbet_list, function(kbet_out) {kbet_out$summary[1, ]}) %>%
do.call(rbind, .) %>%
rename(`Expected kBET` = kBET.expected, `Observed kBET` = kBET.observed, `p-value` = kBET.signif) %>% round(digits = 3)
kbet_df
feature_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
pca_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
umap_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
cv_manufac_ml <- ml_cv_tester(cv_data_list, 1:4, final_visits_covariates,
outcome = "Manufacturer", repeats = 3)
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
cv_manufac_methods <- vector("list", length(cv_data_list[1:4]))
n_per_list <- nrow(cv_manufac_ml) / length(cv_data_list[1:4])
for (i in 1:length(cv_data_list[1:4])) {
start_ind <- ((i - 1) * n_per_list + 1)
end_ind <- i * n_per_list
cv_manufac_methods[[i]] <- cv_manufac_ml[start_ind:end_ind, ]
}
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBat"))
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#CAB2D6")
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
write.csv(combat_val, "./data/revisions/combat_val.csv")
write.csv(covbat_val, "./data/revisions/covbat_val.csv")
write.csv(dc_val, "./data/revisions/deepcombat_01_val.csv")
cv_vector <- sample(rep(1:10, nrow(final_visits_raw))[1:nrow(final_visits_raw)])
lapply(1:10, function(i) {table(final_visits_covariates$Manufacturer[cv_vector == i])})
cv_harmonization <- function(data, covariates, cv_vector, cv_id) {
train_inds <- cv_vector != cv_id
val_inds <- cv_vector == cv_id
cov <- model.matrix(~ SEX + DIAGNOSIS + AGE, covariates)[, -1]
if (is.null(cv_id)) {
message("Using whole dataset as training with no validation")
train_inds <- rep(TRUE, nrow(data))
}
combat_train <- neuroCombat(dat = t(data[train_inds, ]),
batch = covariates$Manufacturer[train_inds],
mod = cov[train_inds, ])
covbat_train <- covbat(dat = t(data[train_inds, ]),
bat = covariates$Manufacturer[train_inds],
mod = cov[train_inds, ])
setup_train <- deepcombat_setup(~ AGE + SEX + DIAGNOSIS,
~ Manufacturer,
data[train_inds, ],
covariates[train_inds, ],
cvae_settings = list(n_hidden = 2, vae_dim = c(62, 30, 16, 8)),
use_default_optim = FALSE)
trainer_train <- deepcombat_trainer(setup_train, verbose = TRUE, optimizer = optim_adamw(setup_train$cvae$parameters, lr = 0.01))
harmonized_train <- deepcombat_harmonize(setup_train, trainer_train)
message("Performing validation harmonization")
if (!is.null(cv_id)) {
combat_val <- combat_from_train(dat = t(data[val_inds, ]),
batch = covariates$Manufacturer[val_inds],
mod = cov[val_inds, ],
estimates = combat_train$estimates)
covbat_val <- covbat_from_train(dat = t(data[val_inds, ]),
batch = covariates$Manufacturer[val_inds],
mod = cov[val_inds, ],
covbat_train = covbat_train)
setup_val <- deepcombat_setup_from_train(setup_train,
~ AGE + SEX + DIAGNOSIS,
~ Manufacturer,
data[val_inds, ],
covariates[val_inds, ])
message("Harmonizing")
harmonized_val <- deepcombat_harmonize(setup_val, trainer_train, harmonized_train, verbose = TRUE)
return(list(combat_train = t(combat_train$dat.combat),
combat_val = t(combat_val$dat.combat),
covbat_train = t(covbat_train$dat.covbat),
covbat_val = t(covbat_val$dat.covbat),
dc_train = harmonized_train$harmonized,
dc_val = harmonized_val$harmonized))
} else {
return(list(combat_train = t(combat_train$dat.combat),
covbat_train = t(covbat_train$dat.covbat),
dc_train = harmonized_train$harmonized))
}
}
cv_harm_output <- lapply(1:10, function(cv_id) {
cv_harmonization(final_visits_raw, final_visits_covariates, cv_vector, cv_id)
})
cv_data_list <- list(raw = final_visits_raw, combat = combat_val,
covbat = covbat_val, dc = dc_val)
stats_test <- stats_tester(cv_data_list[1:4], final_visits_covariates)
stats_test[[1]]
kbet_list <- lapply(cv_data_list, function(df) {
kbet_obj <- kBET(df, batch = final_visits_covariates$Manufacturer)
return(kbet_obj)
})
kbet_df <- lapply(kbet_list, function(kbet_out) {kbet_out$summary[1, ]}) %>%
do.call(rbind, .) %>%
rename(`Expected kBET` = kBET.expected, `Observed kBET` = kBET.observed, `p-value` = kBET.signif) %>% round(digits = 3)
kbet_df
feature_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
pca_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
umap_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
cv_manufac_ml <- ml_cv_tester(cv_data_list, 1:4, final_visits_covariates,
outcome = "Manufacturer", repeats = 3)
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
cv_manufac_methods <- vector("list", length(cv_data_list[1:4]))
n_per_list <- nrow(cv_manufac_ml) / length(cv_data_list[1:4])
for (i in 1:length(cv_data_list[1:4])) {
start_ind <- ((i - 1) * n_per_list + 1)
end_ind <- i * n_per_list
cv_manufac_methods[[i]] <- cv_manufac_ml[start_ind:end_ind, ]
}
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBat"))
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#CAB2D6")
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_plot <- ggplot((cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_ml <- ml_cv_tester(cv_data_list, 1:4, final_visits_covariates,
outcome = "Manufacturer", repeats = 20)
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
cv_manufac_methods <- vector("list", length(cv_data_list[1:4]))
n_per_list <- nrow(cv_manufac_ml) / length(cv_data_list[1:4])
for (i in 1:length(cv_data_list[1:4])) {
start_ind <- ((i - 1) * n_per_list + 1)
end_ind <- i * n_per_list
cv_manufac_methods[[i]] <- cv_manufac_ml[start_ind:end_ind, ]
}
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBat"))
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#CAB2D6")
cv_manufac_plot <- ggplot((cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("AUROC") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_plot <- ggplot((cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
write.csv(combat_val, "./data/revisions/combat_val_0121.csv")
write.csv(covbat_val, "./data/revisions/covbat_val_0121.csv")
write.csv(dc_val, "./data/revisions/deepcombat_01_val_0121.csv")
cv_manufac_methods_df
cv_manufac_plot <- ggplot((manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_plot <- ggplot((manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
stats_test[[1]]
?optim_adamw
cv_data_list <- list(raw = final_visits_raw, combat = combat_val,
covbat = covbat_val, dc = dc_val, dcin = silver_standard$dc_train)
stats_test <- stats_tester(cv_data_list[1:4], final_visits_covariates)
stats_test[[1]]
kbet_list <- lapply(cv_data_list, function(df) {
kbet_obj <- kBET(df, batch = final_visits_covariates$Manufacturer)
return(kbet_obj)
})
kbet_df <- lapply(kbet_list, function(kbet_out) {kbet_out$summary[1, ]}) %>%
do.call(rbind, .) %>%
rename(`Expected kBET` = kBET.expected, `Observed kBET` = kBET.observed, `p-value` = kBET.signif) %>% round(digits = 3)
kbet_df
feature_plotter <- function(data_list, covariates, plot_names, col_num = NULL) {
# if (length(data_list) != 6) {
#   stop("Length of data_list must be 6")
# }
if (is.null(col_num)) {
col_num <- sample(1:62, 1)
cat(paste0("Column number is: ", col_num))
}
feature_plot_list <- vector("list", length(data_list))
for (i in 1:length(data_list)) {
tmp_df <- as.data.frame(data_list[[i]][, col_num]) %>% cbind(covariates$manufac)
names(tmp_df) <- c("feature", "manufac")
tmp_df$manufac <- as.factor(tmp_df$manufac)
feature_plot_list[[i]] <- ggplot(tmp_df) +
geom_density(aes(feature, fill = manufac), alpha = 0.5) +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
labs(x = "", y = "", title = plot_names[i])
}
ggarrange(plotlist = feature_plot_list, nrow = 2, ncol = 3)
}
feature_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
source("~/Documents/nnbatch/code/eval_utils_revisions.R")
stats_test <- stats_tester(cv_data_list[1:5], final_visits_covariates)
stats_test[[1]]
pca_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
umap_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
cv_manufac_ml <- ml_cv_tester(cv_data_list, 1:5, final_visits_covariates,
outcome = "Manufacturer", repeats = 20)
cv_data_list <- list(raw = final_visits_raw, combat = combat_val,
covbat = covbat_val, dc = dc_val,
dcreg = silver_standard$dc_train,
dcmle = harmonized$harmonized)
stats_test <- stats_tester(cv_data_list[1:6], final_visits_covariates)
stats_test[[1]]
kbet_list <- lapply(cv_data_list, function(df) {
kbet_obj <- kBET(df, batch = final_visits_covariates$Manufacturer)
return(kbet_obj)
})
kbet_df <- lapply(kbet_list, function(kbet_out) {kbet_out$summary[1, ]}) %>%
do.call(rbind, .) %>%
rename(`Expected kBET` = kBET.expected, `Observed kBET` = kBET.observed, `p-value` = kBET.signif) %>% round(digits = 3)
kbet_df
kbet_df <- lapply(kbet_list, function(kbet_out) {kbet_out$summary[1, ]}) %>%
do.call(rbind, .) %>%
rename(`Expected kBET` = kBET.expected, `Observed kBET` = kBET.observed, `p-value` = kBET.signif) %>% round(digits = 3)
kbet_df
feature_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
pca_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
umap_plotter(cv_data_list, final_visits_covariates, names(cv_data_list))
cv_manufac_ml <- ml_cv_tester(cv_data_list, 1:5, final_visits_covariates,
outcome = "Manufacturer", repeats = 20)
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
cv_manufac_methods <- vector("list", length(cv_data_list[1:4]))
n_per_list <- nrow(cv_manufac_ml) / length(cv_data_list[1:4])
for (i in 1:length(cv_data_list[1:4])) {
start_ind <- ((i - 1) * n_per_list + 1)
end_ind <- i * n_per_list
cv_manufac_methods[[i]] <- cv_manufac_ml[start_ind:end_ind, ]
}
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBat"))
ml_names <- c("RF", "SVM (Radial)", "KNN", "QDA", "XGBoost")
cv_manufac_methods <- vector("list", length(cv_data_list[1:5]))
n_per_list <- nrow(cv_manufac_ml) / length(cv_data_list[1:5])
for (i in 1:length(cv_data_list[1:5])) {
start_ind <- ((i - 1) * n_per_list + 1)
end_ind <- i * n_per_list
cv_manufac_methods[[i]] <- cv_manufac_ml[start_ind:end_ind, ]
}
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBat"))
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg", "DeepComBat"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg", "DeepComBat"))
cv_manufac_ml
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg"))
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#CAB2D6")
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#CAB2D6")
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_methods_df <- bind_rows(cv_manufac_ml) %>%
mutate(algorithm = as.factor(rep(ml_names, length(cv_manufac_methods))),
algorithm_releveled = fct_relevel(algorithm,
"SVM (Radial)", "QDA",
"KNN", "RF", "XGBoost"),
harm_method = as.factor(rep(c("Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg"),
each = length(ml_names))),
harm_method_releveled = fct_relevel(harm_method,
"Raw", "ComBat", "CovBat",
"DeepComBatVal", "DeepComBatReg"))
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#CAB2D6")
my_colors <- c("#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C", "#CAB2D6")
cv_manufac_plot <- ggplot(rbind(manufac_methods_df, cv_manufac_methods_df), aes(x = algorithm_releveled, y = Accuracy,
fill = harm_method_releveled)) +
geom_bar(stat = "identity", position = position_dodge(.9)) +
geom_hline(yintercept = 0.33, color = "red", linetype = "dashed") +
geom_errorbar(aes(ymin = Accuracy - 1.984 * AccuracySD / sqrt(200), ymax = Accuracy + 1.984 * AccuracySD / sqrt(200)),
position = position_dodge(.9)) +
scale_fill_manual(values = my_colors, name = "Methods") +
coord_cartesian(ylim = c(0.33, 1)) +
ggtitle("Batch") +
xlab("Machine Learning Algorithm") +
ylab("Accuracy") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5)); cv_manufac_plot
cv_manufac_methods_df
(silver_standard$combat_train - combat_val)^2 %>% mean
(silver_standard$covbat_train - covbat_val)^2 %>% mean
(silver_standard$dc_train - dc_val)^2 %>% mean
abs(silver_standard$combat_train - combat_val) %>% mean
abs(silver_standard$covbat_train - covbat_val) %>% mean
abs(silver_standard$dc_train - dc_val) %>% mean
cor(as.vector(silver_standard$combat_train), as.vector(combat_val))
cor(as.vector(silver_standard$covbat_train), as.vector(covbat_val))
cor(as.vector(silver_standard$dc_train), as.vector(dc_val))
source("~/Documents/nnbatch/code/eval_utils_revisions.R")
source("~/Documents/nnbatch/code/eval_utils_revisions.R")
stats_test[[1]]
kbet_List
kbet_list
kbet_df
